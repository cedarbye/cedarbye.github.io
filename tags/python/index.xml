<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on cedar&#39;s blog</title>
    <link>https://cedarbye.github.io/tags/python/</link>
    <description>Recent content in Python on cedar&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 21 Apr 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://cedarbye.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PythonChallenge攻略</title>
      <link>https://cedarbye.github.io/post/2015/2015_04_21PythonChallenge%E6%94%BB%E7%95%A5/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cedarbye.github.io/post/2015/2015_04_21PythonChallenge%E6%94%BB%E7%95%A5/</guid>
      <description>

&lt;p&gt;最近经人推荐一游戏（暂且算游戏吧，娱乐性比较强），玩起来还是很有兴趣的，玩起来根本停不下来，顺便把这一天的成功分享一下&lt;/p&gt;

&lt;h3 id=&#34;第0关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第0关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/0.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;图片上显示2 38，第一次还认为是238，后来一想这和python有什么关系？果断想到2^38，下面有提示&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Hint: try to change the URL address.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以很明显计算下2^38，替换地址栏的0就可以了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;2**38
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;第1关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第1关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/map.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第一眼看到图片时我竟想到了我们那坑爹的密码学课程，这不就是凯撒密码啊！下面还有一串提示&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&amp;rsquo;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好吧，根据图片来看应该是右移两位，对应地址栏中的map，所得的应该是 &lt;em&gt;ocr&lt;/em&gt; ，替换OK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import string
str = &amp;quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#39;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.&amp;quot;
transfun = string.maketrans(&#39;abcdefghijklmnopqrstuvwxyz&#39;,&#39;cdefghijklmnopqrstuvwxyzab&#39;)
print str.translate(transfun)
print &#39;map&#39;.translate(transfun)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;第2关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第2关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/map.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这一关的图片是一本模糊的书，下面有提示：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;recognize the characters. maybe they are in the book,
but MAYBE they are in the page source.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好吧，那我们就看一下源码，F12进入
源文件发现有这么一行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;find rare characters in the mess below:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;原来是要找到最少的字符，但下来跟随的是一波乱码，再仔细看一下，应该是ascii码，那这里我们就来处理一下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re
f=open(&#39;2.tmp&#39;,&#39;r&#39;)
str=f.read()
res=re.findall(r&amp;quot;[a-zA-Z]&amp;quot;, str)
print &#39;&#39;.join(res)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import string
print &#39;&#39;.join([i for i in open(&#39;2.tmp&#39;).read() if i in string.ascii_letters])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们得到了 &lt;em&gt;equality&lt;/em&gt; ，输入地址栏OK&lt;/p&gt;

&lt;h3 id=&#34;第3关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第3关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/equality.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里7只蜡烛，提示：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;One small letter, surrounded by EXACTLY three big bodyguards on each of its sides.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那这里应该是AAAaAAA的结构了，我们再次从源文件中发现了一段字符，应该就是从这里找了，让我们来试一下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import urllib2,re
f=urllib2.urlopen(&#39;http://www.pythonchallenge.com/pc/def/equality.html&#39;)
str= f.read()
res=re.findall(r&amp;quot;[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]&amp;quot;, str)
print &#39;&#39;.join(res).lower()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们得到了 &lt;em&gt;linkedlist&lt;/em&gt; 这个词，替换Url，下一关。&lt;/p&gt;

&lt;h3 id=&#34;第4关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第4关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/linkedlist.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一进来竟然提示个这个&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;linkedlist.php&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这意思是要有处理了？那我们就换地址来到&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/linkedlist.php&#34;&gt;地址&lt;/a&gt;，发现图片是有onclick()事件的，点击后发现跳转到了&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345&#34;&gt;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后显示&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;and the next nothing is 44827&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那我们替换地址后五位，得到下一个&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=44827&#34;&gt;地址&lt;/a&gt;
显示&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;and the next nothing is 45439&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这下子看来是要一直跳转下去了，用python来处理下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re,urllib
value=33110
pattern=r&amp;quot;(?&amp;lt;=and the next nothing is )\d+&amp;quot;
response=urllib.urlopen(&amp;quot;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%s&amp;quot;%value)
while True:
    page=response.read()
    matche=re.search(pattern, page)
    if not matche:
        break;
    else:
        print page
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原以为这就可以了，后来发现竟然出现了这&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Yes. Divide by two and keep going.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那我们这里就修改下代码就可以了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re,urllib
value=33110
pattern=r&amp;quot;(?&amp;lt;=and the next nothing is )\d+&amp;quot;
#findNothing = re.compile(r&#39;(?&amp;lt;=and the next nothing is )\d+&#39;).search  
while True:
    response=urllib.urlopen(&amp;quot;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=%s&amp;quot;%value)
    
    page=response.read()
    matche=re.search(pattern, page)
    #matche=findNothing(page)
    if not matche:
        break;
    else:
        print page
        value=matche.group(0)
print int(value)/2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终出现了不一样的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;peak&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用 &lt;em&gt;peak&lt;/em&gt; 替换Url，下一关&lt;/p&gt;

&lt;h3 id=&#34;第5关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第5关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/peak.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个很简洁，提示：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;pronounce it&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看起来好像毫无头绪，但是在源代码里发现&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;peakhell src=&amp;ldquo;banner.p&amp;rdquo;
peak hell sounds familiar ?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里我们下载&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/banner.p&#34;&gt;banner.p&lt;/a&gt;，根据提示，&amp;rdquo;peak hell&amp;rdquo; 发音类似 &amp;ldquo;pickle&amp;rdquo;，用pickle 处理banner.p。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pickle
object = pickle.load(open(&amp;quot;banner.p&amp;quot;))
for item in object:
    print &amp;quot;&amp;quot;.join(map(lambda p: p[0]*p[1], item))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们得到一个由#组成的字母 &lt;em&gt;channel&lt;/em&gt; ，替换Url，下一关&lt;/p&gt;

&lt;h3 id=&#34;第6关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第6关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/channel.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;图片是一个拉链(zip)，在源文件中有这样一段&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The following has nothing to do with the riddle itself. I just
thought it would be the right point to offer you to donate to the
Python Challenge project. Any amount will be greatly appreciated.
-thesamet&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那我们把网页后缀改成.zip，发现可以下载，这下我们得到一个channel.zip，解压得倒一个readme.txt和好多由数字组成的文件，打开readme.txt:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;welcome to my zipped list.
hint1: start from 90052
hint2: answer is inside the zip&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好吧，从90052.txt 开始处理。直到出现：Collect the comments.
看来得用zipfile把comments收集下，上述过程再重复一遍（还是从90052.txt）开始，记录每次遇到的文件的comment&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import zipfile,re
z=zipfile.ZipFile(&#39;channel.zip&#39;,&#39;r&#39;)
value=90052
findNothing = re.compile(r&#39;(?&amp;lt;=Next nothing is )\d+&#39;).search
comments=[]
while True:
    content=z.read(&#39;%s.txt&#39;%value)
    comments.append(z.getinfo(&#39;%s.txt&#39;%value).comment)
    match=findNothing(content)
#   match=apply(findNothing,(content,))
    if match:
        value=match.group(0)
    else:
        break
    print content
print z.read(&#39;%s.txt&#39;%value)
print &#39;&#39;.join(comments)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印记录的comments，形如&amp;rdquo;hockey&amp;rdquo;。
打开&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/hockey.html：&#34;&gt;http://www.pythonchallenge.com/pc/def/hockey.html：&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;it&amp;rsquo;s in the air. look at the letters.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;表示还没完，要从letters中找答案。组成&amp;rdquo;hockey&amp;rdquo;形状的单词分别是O、X、Y、G、E、N，即&amp;rdquo; &lt;em&gt;oxygen&lt;/em&gt; &amp;ldquo;。替换地址，下一关。&lt;/p&gt;

&lt;h3 id=&#34;第7关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第7关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/map.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这张图片是个长条的，打开时还以为没加载完，刷新了好几次。
我们发现这张图片中间有个灰度条，没有其他提示，必然要从图片下手了。用到PIL。
该图像模式是RGBA。每个像素是个四元组，前3个分量分别代表红&amp;reg;、绿(G)、蓝(B)，对于灰度图像，R=B=G。
这样，我们可以找到这段灰度条。将其数值按照ASCII码映射为字符（chr 函数）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import Image
im = Image.open(&amp;quot;oxygen.png&amp;quot;)
print im.format, im.mode, im.size
w,h=im.size
print im.getpixel((0,h//2))
print &#39;&#39;.join([chr(im.getpixel((i,h//2))[0]) for i in range(0,w,7)])
print &#39;&#39;.join(map(chr,[105, 110, 116, 101, 103, 114, 105, 116, 121]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到 &lt;em&gt;integrity&lt;/em&gt; ，替换进入下一关&lt;/p&gt;

&lt;h3 id=&#34;第8关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第8关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/map.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这是一只苍蝇，我们在源码中发现重定位地址&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;href=&amp;ldquo;../return/good.html&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;跳转后发现需要登录，那用户名和密码在哪里呢？又在源码中发现&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;un: &amp;lsquo;BZh91AY&amp;amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00\x00!\x9ah3M\x07&amp;lt;]\xc9\x14\xe1BA\x06\xbe\x084&amp;rsquo;
pw: &amp;lsquo;BZh91AY&amp;amp;SY\x94\$|\x0e\x00\x00\x00\x81\x00\x03$\x00!\x9ah3M\x13&amp;lt;]\xc9\x14\xe1BBP\x91\xf08&amp;rsquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看来这就应该是需要的用户名和密码了，发现开头是BZh，所以我们用bz2来解码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import bz2
print &amp;quot;username:%s&amp;quot;%bz2.decompress(&amp;quot;BZh91AY&amp;amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&amp;lt;]\xc9\x14\xe1BA\x06\xbe\x084&amp;quot;)
print &amp;quot;password:%s&amp;quot;%bz2.decompress(&amp;quot;BZh91AY&amp;amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&amp;lt;]\xc9\x14\xe1BBP\x91\xf08&amp;quot;)
a=&amp;quot;BZh91AY&amp;amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&amp;lt;]\xc9\x14\xe1BBP\x91\xf08&amp;quot;
print a.decode(&#39;bz2&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后得到&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;un: &lt;em&gt;huge&lt;/em&gt;&lt;br /&gt;
pw: &lt;em&gt;file&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;输入进入下一关&lt;/p&gt;

&lt;h3 id=&#34;第9关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第9关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/return/good.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这张图片上有许多点，源代码中提示：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;first+second=?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;first:&lt;/em&gt;
&lt;em&gt;146,399,163,403,170,393,169,391,166,386,170,381,170,371,170,355,169,346,167,335,170,329&amp;hellip;&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;second:&lt;/em&gt;
&lt;em&gt;156,141,165,135,169,131,176,130,187,134,191,140,191,146,186,150,179,155,175,157,168,157&amp;hellip;&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就应该是点的坐标了，我们把它们连起来&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import Image
from functools import partial
#省略后面
first=[146,399,163,403,170,393,169,391,166,386,170,381,170,371,170,355,169,346,167,335,170,329,170,320,170......]
second=[156,141,165,135,169,131,176,130,187,134,191,140,191,146,186,150,179,155,175,157,168,157,163,157,159......]
im=Image.open(&amp;quot;good.jpg&amp;quot;, &amp;quot;r&amp;quot;)
image=Image.new(im.mode, im.size)
color=(100,255,100)
#points=[(x,y) for x in first for y in second]
points=[(first[x],first[x+1]) for x in range(0,len(first),2)]
points.extend([(second[x],second[x+1]) for x in range(0,len(second),2)])
#points.sort()
#print points
image.putpixel2=partial(image.putpixel,value=color)
for point in points:
    image.putpixel2(point)
image.save(&amp;quot;good2.jpg&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;发现first是一头牛，而second是一个十字，尝试一下cow，提示&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;hmm. it&amp;rsquo;s a male.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好吧，那就试下 &lt;em&gt;bull&lt;/em&gt; ，这就OK了&lt;/p&gt;

&lt;h3 id=&#34;第10关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第10关&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/return/bull.html&#34;&gt;地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这就应该是刚才画得那头牛了，图片下提示&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;len(a[30]) = ?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而我们点击牛顿图片会出现&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;a=[1,11,21,1211,111221,&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很明显是让我们解出第31个数字。好吧这规律题实在不是强项，直接上代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re
result=&#39;1&#39;
pattern=re.compile(r&#39;((?P&amp;lt;w&amp;gt;\d)(?P=w)*)&#39;)
for i in range(30):
    a=map(lambda x:&#39;%s%s&#39;%(len(x[0]),x[1]),pattern.findall(result))
    result=&#39;&#39;.join(a)
print len(result)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解出 &lt;em&gt;5808&lt;/em&gt; ,替换进入下一页。&lt;/p&gt;

&lt;h3 id=&#34;第11关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第11关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第12关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第12关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第13关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第13关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第14关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第14关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第15关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第15关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第16关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第16关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第17关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第17关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第18关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第18关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第19关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第19关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第20关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第20关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第21关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第21关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第22关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第22关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第23关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第23关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第24关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第24关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第25关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第25关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第26关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第26关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第27关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第27关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第28关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第28关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第29关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第29关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第30关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第30关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第31关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第31关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第32关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第32关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;

&lt;h3 id=&#34;第33关:8037ba5d5dbec3c1f77f12dcca35b99c&#34;&gt;第33关&lt;/h3&gt;

&lt;p&gt;[地址]()&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>机器学习——DBSCAN算法</title>
      <link>https://cedarbye.github.io/post/2015/2015_04_17DBSCAN%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://cedarbye.github.io/post/2015/2015_04_17DBSCAN%E7%AE%97%E6%B3%95/</guid>
      <description>

&lt;h2 id=&#34;1-什么是dbscan算法:cfad866b17f17627f7a4c667faafc845&#34;&gt;1. 什么是DBSCAN算法&lt;/h2&gt;

&lt;p&gt;DBSCAN（Density-Based Spatial Clustering of Applications with Noise）聚类算法，它是一种基于高密度连通区域的、基于密度的聚类算法，能够将具有足够高密度的区域划分为簇，并在具有噪声的数据中发现任意形状的簇。我们总结一下DBSCAN聚类算法原理的基本要点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DBSCAN算法需要选择一种距离度量，对于待聚类的数据集中，任意两个点之间的距离，反映了点之间的密度，说明了点与点是否能够聚到同一类中。由于DBSCAN算法对高维数据定义密度很困难，所以对于二维空间中的点，可以使用欧几里德距离来进行度量。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBSCAN算法需要用户输入2个参数：一个参数是半径（Eps），表示以给定点P为中心的圆形邻域的范围；另一个参数是以点P为中心的邻域内最少点的数量（MinPts）。如果满足：以点P为中心、半径为Eps的邻域内的点的个数不少于MinPts，则称点P为核心点。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBSCAN聚类使用到一个k-距离的概念:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;k-距离是指：给定数据集P={p(i); i=0,1,…n}，对于任意点P(i)，计算点P(i)到集合D的子集S={p(1), p(2), …, p(i-1), p(i+1), …, p(n)}中所有点之间的距离，距离按照从小到大的顺序排序，假设排序后的距离集合为D={d(1), d(2), …, d(k-1), d(k), d(k+1), …,d(n)}，则d(k)就被称为k-距离。也就是说，k-距离是点p(i)到所有点（除了p(i)点）之间距离第k近的距离。对待聚类集合中每个点p(i)都计算k-距离，最后得到所有点的k-距离集合E={e(1), e(2), …, e(n)}。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;根据经验计算半径Eps：根据得到的所有点的k-距离集合E，对集合E进行升序排序后得到k-距离集合E’，需要拟合一条排序后的E’集合中k-距离的变化曲线图，然后绘出曲线，通过观察，将急剧发生变化的位置所对应的k-距离的值，确定为半径Eps的值。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;根据经验计算最少点的数量MinPts：确定MinPts的大小，实际上也是确定k-距离中k的值，DBSCAN算法取k=4，则MinPts=4。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;另外，如果觉得经验值聚类的结果不满意，可以适当调整Eps和MinPts的值，经过多次迭代计算对比，选择最合适的参数值。可以看出，如果MinPts不变，Eps取得值过大，会导致大多数点都聚到同一个簇中，Eps过小，会导致已一个簇的分裂；如果Eps不变，MinPts的值取得过大，会导致同一个簇中点被标记为噪声点，MinPts过小，会导致发现大量的核心点。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们需要知道的是，DBSCAN算法，需要输入2个参数，这两个参数的计算都来自经验知识。半径Eps的计算依赖于计算k-距离，DBSCAN取k=4，也就是设置MinPts=4，然后需要根据k-距离曲线，根据经验观察找到合适的半径Eps的值，下面的算法实现过程中，我们会详细说明。&lt;/p&gt;

&lt;h2 id=&#34;2-算法实现:cfad866b17f17627f7a4c667faafc845&#34;&gt;2. 算法实现&lt;/h2&gt;

&lt;p&gt;对于算法的实现，首先我们概要地描述一下实现的过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;解析样本数据文件&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;计算每个点与其他所有点之间的欧几里德距离&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;计算每个点的k-距离值，并对所有点的k-距离集合进行升序排序，输出的排序后的k-距离值&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将所有点的k-距离值，在Excel中用散点图显示k-距离变化趋势&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;根据散点图确定半径Eps的值&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;根据给定MinPts=4，以及半径Eps的值，计算所有核心点，并建立核心点与到核心点距离小于半径Eps的点的映射&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;根据得到的核心点集合，以及半径Eps的值，计算能够连通的核心点，得到噪声点&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将能够连通的每一组核心点，以及到核心点距离小于半径Eps的点，都放到一起，形成一个簇&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;选择不同的半径Eps，使用DBSCAN算法聚类得到的一组簇及其噪声点，使用散点图对比聚类效果&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;代码&lt;/p&gt;

&lt;h2 id=&#34;3-总结:cfad866b17f17627f7a4c667faafc845&#34;&gt;3. 总结&lt;/h2&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不需要事先知道要形成的簇类的数量。&lt;/li&gt;
&lt;li&gt;可以发现任意形状的簇类。&lt;/li&gt;
&lt;li&gt;能够识别出噪声点。&lt;/li&gt;
&lt;li&gt;对于数据库中样本的顺序不敏感，即Pattern的输入顺序对结果的影响不大。但是，对于处于簇类之间边界样本，可能会根据哪个簇类优先被探测到而其归属有所摆动。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不能很好反映高维数据。&lt;/li&gt;
&lt;li&gt;不能很好反映数据集以变化的密度。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为DBSCAN聚类算法是基于密度的聚类算法，所以对于密度分别不均，各个簇的密度变化较大时，可能会导致一些问题：比如半径Eps较大时，本来不属于同一个的簇的点被聚到一个簇中；比如半径Eps比较小时，会出现大量比较小的簇（即每个簇中含有的点不较少，但是这些点组成的小簇密度确实很大），同时出现了大量的点不满足成为核心点的要求，MinPts越大越容易出现这种情况。&lt;/p&gt;

&lt;p&gt;DBSCAN聚类算法的思想非常明确易懂，虽然需要用户输入2个参数，但是正是输入参数的灵活性，我们可以根据自己实际应用的需要，适当调整参数值，在特定应用场景下进行聚类分析，得到合适的簇划分。通过上面选择不同参数进行聚类的结果对比，如果希望局部比较密集的点都能够生成簇，那么在固定MinPts的值的条件下，半径Eps通过调整变小，可能达到这一需要，产生的簇的数量比较多，但是同时也产生了大量分散的噪声点，实际上应该可以进行二次聚类，将噪声点也通过合适的方式归到指定的簇中；如果希望生成全局比较大的簇，可以适当调整半径Eps变大，生成的簇的数量较少，噪声点的数量也相对较少。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>